import requests
import base64
import PySimpleGUI as sg
import json
import os
import threading
from time import sleep
import time
import pymysql
import io
from io import BytesIO
import win32con
import win32clipboard as clip
from PIL import Image
from base64 import b64decode
import pandas as pd
from lxml import etree
from qcloud_cos import CosConfig
from qcloud_cos import CosS3Client
import warnings
warnings.filterwarnings("ignore")


import inspect
import ctypes
def _async_raise(tid, exctype):
    """raises the exception, performs cleanup if needed"""
    tid = ctypes.c_long(tid)
    if not inspect.isclass(exctype):
        exctype = type(exctype)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")
def stop_thread(thread):
    _async_raise(thread.ident, SystemExit)



# 知乎图片爬取模块

pic = ""


class Answer(object):
    def __init__(self):
        self.id = ""
        self.url = ""
        self.response = None
        self.author = ""
        self.picURLList = []


class User(object):
    def __init__(self, cookie):
        self.Cookie = cookie
        self.user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
        self.headers = {
            "user-agent": self.user_agent
        }
        if not cookie == None:
            self.headers["cookie"] = self.Cookie
        self.session = requests.session()
        self.session.headers = self.headers
        self.currentBrowseAnswer = Answer()

    def getZhiHuAnswerWeb(self):
        while True:
            try:
                response = self.session.get(url=self.currentBrowseAnswer.url)
                break
            except:
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), "获取回答页面超时，有可能IP被知乎禁了，等待30秒再继续...")
                sleep(30)
        return response

    def getAnswerAuthor(self):
        try:
            content = self.currentBrowseAnswer.response.text
            HTML = etree.HTML(content)
            author = HTML.xpath(
                '//div[@class="Card AnswerCard"]//div[@class="AuthorInfo-content"]/div[@class="AuthorInfo-head"]//a[@class="UserLink-link"]/text()')[
                0]
        except:
            return 'AnonymousUser'
        return author

    def extractPicURL(self, author):
        content = self.currentBrowseAnswer.response.text
        HTML = etree.HTML(content)
        picURLList = HTML.xpath(
            '//div[@class="Card AnswerCard"]//div[@class="RichContent-inner"]/span/figure/img/@data-original')
        print(time.strftime(
            "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '答主：“%s” 一共有 %d 个表情包，开始爬取！' % (author, len(picURLList)))
        return picURLList

    def downloadPicList(self, path, window):
        cnt = 0
        for url in self.currentBrowseAnswer.picURLList:
            filename = os.path.basename(url)
            filename = filename[::-1][filename[::-1].index("?") + 1:][::-1]
            if os.path.exists(path + self.currentBrowseAnswer.id + "@" + filename):
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '图片 %s 已存在！' % (self.currentBrowseAnswer.id + "@" + filename))
                cnt += 1
                continue
            print(time.strftime(
                "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '正在下载第 %d / %d 张：%s' % (cnt+1, len(self.currentBrowseAnswer.picURLList), self.currentBrowseAnswer.id + "@" + filename))
            self.downloadPic(url, path)
            cnt += 1
            window['-ZHIHUPROGRESS-'].update_bar(100 /
                                                 len(self.currentBrowseAnswer.picURLList) * cnt)
            window['-ZHIHUPROGRESS_NUM-'].update(
                str(cnt/len(self.currentBrowseAnswer.picURLList) * 100) + "%%")
            sleep(0.8)

    def downloadPic(self, url, path):
        filename = os.path.basename(url)
        filename = filename[::-1][filename[::-1].index("?") + 1:][::-1]
        while True:
            try:
                pic = self.session.get(url).content
                break
            except:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
                      "获取表情包：%s 超时，有可能IP被知乎禁了，等待30秒再继续..." % (filename))
                sleep(30)
        with open(path + self.currentBrowseAnswer.id + "@" + filename, "wb") as f:
            f.write(pic)

# 知乎图片爬取模块


def CopyIP(window,value):
    txt = value
    clip.OpenClipboard()  # 打开剪贴板
    clip.EmptyClipboard()  # 先清空剪贴板
    clip.SetClipboardData(win32con.CF_UNICODETEXT, txt)  # 将IP放入剪贴板
    clip.CloseClipboard()


def fourth_window():
    try:
        while True:
            try:
                conn = pymysql.connect(
                    '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
                break
            except:
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '获取用户数失败，重连数据库中...')
                try:
                    conn.close()
                except:
                    pass
        cursor = conn.cursor()
        cursor.execute("select  SUBSTRING_INDEX(host,':',1)  as  ip  ,  count(*)  from  information_schema.processlist  group  by  ip;")
        res = cursor.fetchall()
        ip = [u[0] for u in res]
        col = []
        for i in range(len(ip)):
            col.append(
                [
                    sg.Text(str(i+1)+":", font=("Noto Serif SC", 16)), sg.Input(ip[i], font=(
                        "Noto Serif SC", 16), size=(15, 1), background_color='GhostWhite', enable_events=True, key='-USERIP%s-' % (str(i+1))),
                    sg.Button('复制', button_color=('white', 'RoyalBlue'), font=("Noto Serif SC", 10),
                              key='USERIPCOPY%s'%(str(i+1)), size=(8, 1))
                ]
            )
        layout = [
            [
                sg.Column(col, background_color='LavenderBlush', size=(
                300, 300), scrollable=True, justification="center", element_justification="center")
            ],
            [
                sg.Exit('退出', button_color=('white', 'firebrick4'),
                        key='Exit_4', size=(40, 1))
            ]
        ]
        IPKEY = ['USERIPCOPY' + str(i+1) for i in range(len(ip))]
        window = sg.Window('当前在线用户', layout)
        while True:
            event, values = window.read()
            
            if event == sg.WIN_CLOSED or event == 'Exit_4':
                break
            if event in IPKEY:
                threading.Thread(target=CopyIP, args=(window, values['-USERIP'+ event.split('Y')[-1] +'-'])).start()

        window.close()

        cursor.close()
        conn.close()
    except:
        pass



    


def OnlineUserNumber(window):
    global flag
    old = []
    sleep(3)
    while True:
        try:
            while True:
                try:
                    conn = pymysql.connect(
                        '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '获取用户数失败，重连数据库中...')
                    try:
                        conn.close()
                    except:
                        pass
            cursor = conn.cursor()
            cursor.execute(
                "select  SUBSTRING_INDEX(host,':',1)  as  ip  ,  count(*)  from  information_schema.processlist  group  by  ip;")
            res = cursor.fetchall()
            number = len(res)
            ip = [u[0] for u in res]
            for user in ip:
                if user not in old:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '用户：%s 开始了TA的斗图之旅。' % (user))
                    old.append(user)
            for o in old:
                if o not in ip:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '用户：%s 圆满地结束了TA的斗图之旅。' % (o))
                    old.remove(o)
            window['-USERNUM-'].update(number)
            if flag == 0:
                cursor.close()
                while True:
                    try:
                        conn.close()
                    except:
                        break
                break
            sleep(2)
        except:
            break


def UpdateEmojiNumber(window):
    global flag
    while True:
        try:
            while True:
                try:
                    conn = pymysql.connect(
                        '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '重连数据库中...')
                    try:
                        conn.close()
                    except:
                        pass

            cursor = conn.cursor()
            cursor.execute("SELECT count(*) FROM EMOJITEXT")
            res = cursor.fetchone()
            number = res[0]
            # window['-EMOJINUM-'].update(res[0])
            cursor.close()
            conn.close()
            sleep(3)
            while True:
                try:
                    conn = pymysql.connect(
                        '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '重连数据库中...')
                    try:
                        conn.close()
                    except:
                        pass

            cursor = conn.cursor()
            cursor.execute("SELECT count(*) FROM EMOJITEXT")
            res = cursor.fetchone()
            if number < res[0]:
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '数据库表情包数量增加了：%d' % (res[0] - number))
            elif number > res[0]:
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '数据库表情包数量减少了：%d' % (number - res[0]))
            number = res[0]
            window['-EMOJINUM-'].update(res[0])
            if flag == 0:
                cursor.close()
                while True:
                    try:
                        conn.close()
                    except:
                        break
                break
            sleep(2)
        except:
            break


def cv2_to_base64(image):
    return base64.b64encode(image).decode('utf8')


def COSUploadAndRecognize(window, path):
    path = path + '/'
    path = path.replace('/', '//')
    headers = {'Authorization': 'tM8vf8nNALQEof3AutJcMf7LDUvZ2YLK'}
    url = 'https://stickers-1259799643.cos.ap-shanghai.myqcloud.com/'

    secret_id = 'AKIDUjnjR2sdTUGm6Bjcy47x1zlIchz1KKgu'     # 替换为用户的secret_id
    secret_key = 'AJFvMYWFm4T1KNCmfIfqoXO3YooY3C8C'     # 替换为用户的secret_key
    region = 'ap-shanghai'    # 替换为地区参https://www.qcloud.com/document/product/436/6224的地简称
    token = None               # 使用临时秘钥需要传入Token，默认为空,可不填
    config = CosConfig(Region=region, SecretId=secret_id,
                       SecretKey=secret_key, Token=token)  # 获取配置对象
    client = CosS3Client(config)

    pics = os.listdir(path)

    Exist = []
    if os.path.exists(path + 'history.txt'):
        with open(path + 'history.txt', 'r+') as f:
            lines = f.readlines()
            for line in lines:
                Exist.append(line.replace("\n", ""))
            f.close()

    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "目录：“%s” 一共有 %d 个文件！" % (path, len(pics)))
    url_list = []
    i = 1
    error_pic = []
    starttime = time.time()

    img_end = {'jpg', 'bmp', 'png', 'jpeg', 'rgb', 'tif', 'tiff', 'gif', 'GIF'}

    try:
        pics = [pic for pic in pics if pic.split('.')[-1] in img_end]
    except:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "目录：%s 含有没有后缀的文件，直接过滤掉！" % (path))
        pics = [pic for pic in pics if '.' in pic]
        pics = [pic for pic in pics if pic.split('.')[-1] in img_end]
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "过滤掉非图片文件后，一共有 %d 个图片！" % (len(pics)))
    pic_num = len(pics)
    for pic in pics:
        if pic not in Exist:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
                  '正在上传:第 %d / %d 张图片：%s' % (i, len(pics), pic))
            upload_cnt = 0
            while True:
                try:
                    response = client.upload_file(
                        Bucket='stickers-1259799643',  # 空间名称自行更改
                        LocalFilePath=path + pic,
                        Key=pic,
                        PartSize=10,
                        MAXThread=10
                    )
                    url_list.append(url + pic)
                    break
                except:
                    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
                          '%s 上传出错，可能重复，等待10s，重新上传！第 %d 次' % (pic, upload_cnt+1))
                    upload_cnt += 1
                    if upload_cnt == 3:
                        break
                    sleep(10)
            window['-UPLOADPROGRESS-'].update_bar(100/pic_num * i)
            window['-UPLOADPROGRESS_NUM-'].update(str(i/pic_num * 100) + "%%")
            i += 1
            with open(path + 'history.txt', 'a+') as f:
                f.writelines(pic)
                f.writelines('\n')
                f.close()
        else:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "正在上传:第 %d / %d 张图片：%s 已经上传过" % (i, len(pics), pic))
            window['-UPLOADPROGRESS-'].update_bar(100/pic_num * i)
            window['-UPLOADPROGRESS_NUM-'].update(str(i/pic_num * 100) + "%%")
            i += 1

    elapse = time.time() - starttime
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "一共上传了 %d 张表情包！耗时：%.3fs" % (i-1, elapse))

    #     file = {'smfile': open(path + pic, 'rb')}
    #     print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '正在上传图片：%s' % (pic))
    #     while True:
    #         try:
    #             res = requests.post(url, files=file, headers=headers).json()
    #             break
    #         except:
    #             print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '%s 上传超时，等待20s，重新上传！' % (pic))
    #             sleep(20)

    #     window['-UPLOADPROGRESS-'].update_bar(100/pic_num * i)
    #     window['-UPLOADPROGRESS_NUM-'].update(str(i/pic_num * 100) + "%%")
    #     i += 1
    #     try:
    #         url_list.append(res['data']['url'])
    #     except:
    #         print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
    #                             time.localtime()), '%s 已经上传过！' % (pic))
    #         error_pic.append(pic)
    #     sleep(0.5)

    # error_cnt = 1
    # for p in error_pic:
    #     file = {'smfile': open(path + p, 'rb')}
    #     print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
    #           '重新上传：%s 第%d/%d张' % (p, error_cnt, len(error_pic)))
    #     res = requests.post(url, files=file, headers=headers).json()
    #     error_cnt += 1
    #     try:
    #         url_list.append(res['data']['url'])
    #     except:
    #         print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
    #                             time.localtime()), '%s 依旧上传失败！' % (p))

    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '开始识别！')

    server_url = "http://8.133.174.247:8866/predict/ocr_system"
    server_headers = {"Content-type": "application/json"}

    cnt = 0
    total_time = 0
    actual_pic_num = len(url_list)

    for url in url_list:
        name = url.split('/')[-1]
        while True:
            try:
                r = requests.get(url, timeout=15)
                # if r.status_codes == 200:
                break
            except:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), 'IP被COS禁了，睡眠0.5分钟！')
                sleep(20)

        img = Image.open(BytesIO(r.content))
        img_bytes = io.BytesIO()
        img.save(img_bytes, format="JPEG")
        img = img_bytes.getvalue()

        if img is None:
            print("error in loading image:{}".format(img))
            continue

        # 发送HTTP请求
        starttime = time.time()
        data = {'images': [cv2_to_base64(img)]}
        try:
            r = requests.post(url=server_url, headers=server_headers,
                              data=json.dumps(data), timeout=30)
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "%s 识别时，服务器长时间未响应！" % (name))
            continue
        elapse = time.time() - starttime
        total_time += elapse
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              "识别了 第 %d / %d 张图片： %s, 识别时间 %.3fs" % (cnt+1, actual_pic_num, name, elapse))
        try:
            res = r.json()["results"][0]
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "%s 没有识别结果。" % (name))
            cnt += 1
            continue
        text = ''
        for i in res:
            text = text + i['text']
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "插入数据库：%s: %s " % (name, text))
        try:
            while True:
                try:
                    conn = pymysql.connect(
                        '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '重连数据库中...')
                    try:
                        conn.close()
                    except:
                        pass
            cur = conn.cursor()
            sql = "insert into EMOJITEXT values(%s,%s)"
            cur.executemany(sql, [(url, text)])
            cur.close()
            conn.commit()
            conn.close()
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "图片已存在数据库，跳过: %s" % (name))
            try:
                conn.close()
            except:
                pass
        cnt += 1
        window['-RECPROGRESS-'].update_bar(100/actual_pic_num * cnt)
        window['-RECPROGRESS_NUM-'].update(str(cnt /
                                               actual_pic_num * 100) + "%%")
    try:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              "平均识别时间: {}".format(float(total_time) / cnt))
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              "总共识别时间: {}".format(float(total_time)))
    except:
        pass
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "总共识别了 %d 张表情包" % (cnt))


def CloudSearch(window, key):
    for i in range(100):
        window['-IMG%s-' % (str(i+1))].update(data=None)

    while True:
        try:
            conn = pymysql.connect(
                '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
            break
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), '重连数据库中...')
            try:
                conn.close()
            except:
                pass
    cur = conn.cursor()

    if ',' in key:  # 只要包含其中一个
        key_list = key.split(',')
        key_set = set()
        for k in key_list:
            cur.execute(
                "select * from  EMOJITEXT where locate('%s',text);" % (k))
            resTuple = cur.fetchall()
            for r in resTuple:
                key_set.add(r[0])

    elif ';' in key:  # 全都包含
        key_list = key.split(';')
        key_intersection = []
        key_cnt = 0
        for k in key_list:
            cur.execute(
                "select * from  EMOJITEXT where locate('%s',text);" % (k))
            resTuple = cur.fetchall()
            resList = [r[0] for r in resTuple]
            if key_cnt == 0:
                key_intersection = resList
            else:
                key_intersection = list(
                    set(key_intersection).intersection(resList))
            key_cnt += 1
        key_set = key_intersection
    else:
        key_set = set()
        cur.execute("select * from  EMOJITEXT where locate('%s',text);" % (key))
        resTuple = cur.fetchall()
        for r in resTuple:
            key_set.add(r[0])

    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "关键字：'%s' 云端一共找到 %d 张表情包！正在展示，速度与网速有关。" % (key, len(key_set)))
    if len(key_set) == 0:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "赶紧上传点表情包吧，已经不够你秀的了！")
        return
    cur.close()
    conn.close()
    cnt = 1
    starttime = time.time()
    for k in key_set:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              '正在展示第 %d / %d 张: %s ...' % (cnt, len(key_set), k.split('/')[-1]))
        try:
            while True:
                try:
                    r = requests.get(k, timeout=15)
                    # if r.status_codes == 200:
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), 'IP被COS禁了，睡眠0.5分钟！')
                    sleep(20)
            image = Image.open(BytesIO(r.content))
            image = image.resize((250, 250))
            buffered = BytesIO()
            image.save(buffered, format="PNG")
            img_str = base64.b64encode(buffered.getvalue())
        except:
            print(time.strftime(
                "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '由于某些原因，%s 已从网络端删除或者获取不到...' % (k))
            cnt += 1
            continue
        if cnt != 301:
            window['-IMG%s-' % (str(cnt))].update(data=img_str)
        else:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "窗口只能展示300张，超出限制，剩下的等等吧...")
            break
        cnt += 1
    elapse = time.time() - starttime
    # print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),'一共耗时：%.3fs'%(elapse))
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "搜索结果展示完毕！实际展示了 %d 张表情包，展示搜索结果耗时：%.3fs" % (cnt - 1, elapse))


def DownloadAndUpdate(path, window):
    path = path + '/'
    path = path.replace('/', '//')
    pics = os.listdir(path)
    Exist = []
    if os.path.exists(path + 'history.txt'):
        with open(path + 'history.txt', 'r+') as f:
            lines = f.readlines()
            for line in lines:
                Exist.append(line.replace("\n", ""))
            f.close()

    while True:
        try:
            conn = pymysql.connect(
                '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
            break
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), '重连数据库中...')
            try:
                conn.close()
            except:
                pass

    cur = conn.cursor()
    cur.execute("SELECT * FROM EMOJITEXT;")
    resTuple = cur.fetchall()
    cur.close()
    conn.close()
    cnt = 0

    num = 0
    for res in resTuple:
        if res[0].split('/')[-1] not in Exist:
            num += 1
    starttime = time.time()
    if num == 0:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "已经与数据库同步，无需更新！")
        return
    for res in resTuple:
        picurl = res[0]
        picname = picurl.split('/')[-1]
        if picname not in Exist:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "正在下载第 %d / %d 张：%s" % (cnt + 1, num, picname))

            while True:
                try:
                    r = requests.get(picurl, timeout=15)
                    # if r.status_codes == 200:
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), 'IP被COS禁了，睡眠0.5分钟！')
                    sleep(20)
            with open(path + picname, "wb") as f:
                f.write(r.content)
                f.close()
            cnt += 1
            window['-DOWNLOADPROGRESS-'].update_bar(100/num * cnt)
            window['-DOWNLOADPROGRESS_NUM-'].update(str(cnt/num * 100) + '%%')
            with open(path + 'history.txt', 'a+') as f:
                f.writelines(picname)
                f.writelines('\n')
                f.close()
        else:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
                  "正在下载第 %d / %d 张：%s 已经存在！" % (cnt + 1, num, picname))
            cnt += 1
            window['-DOWNLOADPROGRESS-'].update_bar(100/num * cnt)
            window['-DOWNLOADPROGRESS_NUM-'].update(str(cnt/num * 100) + '%%')
    elapse = time.time() - starttime
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "一共下载了 %d 张表情包，总耗时：%.3fs" % (cnt, elapse))


def LocalRecognition(path, window):
    path = path + '/'
    path = path.replace('/', '//')
    pics = os.listdir(path)

    server_url = "http://8.133.174.247:8866/predict/ocr_system"
    server_headers = {"Content-type": "application/json"}

    cnt = 0
    total_time = 0

    if not os.path.exists(path + 'result.csv'):
        pd_data = pd.DataFrame([], columns=['name', 'text'])
        pd_data.to_csv(path + 'result.csv', encoding='utf_8_sig')

    img_end = {'jpg', 'bmp', 'png', 'jpeg', 'rgb', 'tif', 'tiff', 'gif', 'GIF'}
    result = pd.read_csv(path + 'result.csv', encoding='utf_8_sig')
    result_list = result['name'].to_list()
    num = 0
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "目录：“%s” 一共有 %d 个文件！" % (path, len(pics)))
    try:
        for p in pics:
            if p not in result_list and p.split('.')[-1] in img_end:
                num += 1
    except:
        pass

    try:
        pics = [pic for pic in pics if pic.split('.')[-1] in img_end]
    except:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "目录：%s 含有没有后缀的文件，直接过滤掉！" % (path))
        pics = [pic for pic in pics if '.' in pic]
        pics = [pic for pic in pics if pic.split('.')[-1] in img_end]

    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "过滤掉非图片文件后，一共有 %d 个图片！" % (len(pics)))
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "此目录还未识别的表情包一共有：%d 张！" % (num))
    for p in pics:
        if os.path.isfile(path + p):
            if p not in result_list:
                img = open(path + p, 'rb').read()
                starttime = time.time()
                data = {'images': [cv2_to_base64(img)]}
                try:
                    r = requests.post(
                        url=server_url, headers=server_headers, data=json.dumps(data), timeout=30)
                except:
                    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
                          "第 %d / %d 个识别项目：%s 识别时，服务器长时间未响应！" % (cnt+1, num, p))
                    continue

                elapse = time.time() - starttime
                total_time += elapse
                print(time.strftime(
                    "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), "第 %d / %d 个识别项目： %s, 识别时间 %.3fs" % (cnt+1, num, p, elapse))
                try:
                    res = r.json()["results"][0]
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '识别项目：%s 无结果' % (p))
                    cnt += 1
                    continue
                text = ''
                for i in res:
                    text = text + i['text']
                new = pd.DataFrame({'name': p, 'text': text}, index=[1])
                result = result.append(new, ignore_index=True, sort=True)
                cnt += 1
                window['-RECPROGRESS_2-'].update_bar(100/num * (cnt))
                window['-RECPROGRESS_NUM_2-'].update(
                    str((cnt) / num * 100) + "%%")
                result.to_csv(path + 'result.csv', encoding='utf_8_sig')
    try:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              "平均识别时间: {}s".format(float(total_time) / cnt))
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              "总共识别时间: {}s".format(float(total_time)))
    except:
        pass
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "总共识别了 %d 张表情包." % (cnt))


def LocalSearch(path, window, key):
    for i in range(100):
        window['-IMG%s-' % (str(i+1))].update(data=None)
    path = path + '/'
    path = path.replace('/', '//')
    result = pd.read_csv(path + 'result.csv', encoding='utf_8_sig')
    result = result.fillna('0')
    result_list = result['name'].to_list()

    if ',' in key or '，' in key:  # 只要包含其中一个
        try:
            key_list = key.split(',')
        except:
            key_list = key.split('，')
        key_set = set()
        for k in key_list:
            res_pic_name_list = [result.iloc[result[result.text == i].index.to_list(
            )[0]]['name'] for i in result['text'] if k in i]
            for n in res_pic_name_list:
                key_set.add(n)
    elif ';' in key or '；' in key:  # 全都包含
        try:
            key_list = key.split(';')
        except:
            key_list = key.split('；')

        key_intersection = []
        key_cnt = 0
        for k in key_list:
            res_pic_name_list = [result.iloc[result[result.text == i].index.to_list(
            )[0]]['name'] for i in result['text'] if k in i]
            if key_cnt == 0:
                key_intersection = res_pic_name_list
            else:
                key_intersection = list(
                    set(key_intersection).intersection(res_pic_name_list))
            key_cnt += 1
        key_set = key_intersection
    else:
        key_set = [result.iloc[result[result.text == i].index.to_list()[0]]['name']
                   for i in result['text'] if key in i]

    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "关键字：'%s' 本地一共找到 %d 张表情包！" % (key, len(key_set)))
    if len(key_set) == 0:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "赶紧更新库存吧，已经不够你秀的了！")
        return
    cnt = 1
    starttime = time.time()
    for k in key_set:
        image = Image.open(path + k)
        image = image.resize((250, 250))
        buffered = BytesIO()
        image.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue())
        if cnt != 301:
            window['-IMG%s-' % (str(cnt))].update(data=img_str)
        else:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "窗口只能展示300张，超出限制，剩下的等等吧...")
            break
        cnt += 1
    elapse = time.time() - starttime
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "实际展示了 %d 张表情包，展示搜索结果耗时：%.3fs" % (cnt-1, elapse))


def ZhihuSpider(path, url, window):
    path = path + '/'
    path = path.replace('/', '//')
    user = User(None)
    starttime = time.time()
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "正在启动爬取引擎...")
    inputArg = url.split('\n')[-1]

    if inputArg.isdigit():
        user.currentBrowseAnswer.id = inputArg
        answerURL = "https://www.zhihu.com/answer/" + inputArg
    elif inputArg[:4] == "http":
        user.currentBrowseAnswer.id = inputArg[::-
                                               1][:inputArg[::-1].index("/")][::-1]
        answerURL = inputArg
    else:
        return
    user.currentBrowseAnswer.url = answerURL
    user.currentBrowseAnswer.response = user.getZhiHuAnswerWeb()
    user.currentBrowseAnswer.author = user.getAnswerAuthor()
    # 没有答主的目录则创建
    authorPath = path
    user.currentBrowseAnswer.picURLList = user.extractPicURL(
        user.currentBrowseAnswer.author)
    user.downloadPicList(path, window)
    elapse = time.time() - starttime
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                        time.localtime()), "爬取完毕，一共耗时：%.3fs！" % (elapse))


def second_window():
    layout = [
        [
            sg.Frame(
                '知乎表情包爬取：', [
                    [
                        sg.Text('表情包目录：'),
                        sg.In(size=(26, 1), enable_events=True,
                              key="-ZHIHUFOLDER-"),
                        sg.FolderBrowse('浏览', size=(12, 1), button_color=(
                            'Lavender', 'BlueViolet'), font=("Noto Serif SC", 12)),
                        sg.Text('回答链接：'),
                        sg.In(size=(26, 1), enable_events=True,
                              key="-ZHIHUURL-"),
                        sg.Button('开始爬取', font=("Noto Serif SC", 12),
                                  size=(15, 1), key='-ZHIHUSEARCHBUTTON-', button_color=('GhostWhite', 'Indigo'))
                    ],
                    [
                        sg.Text('爬取进度    ：'),
                        sg.ProgressBar(100, orientation='h', size=(
                            70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-ZHIHUPROGRESS-'),
                        sg.Text('0%', key='-ZHIHUPROGRESS_NUM-')
                    ]
                ],
                font=("Noto Serif SC", 25), title_color='RoyalBlue')
        ],
        [
            sg.Output(size=(120, 10), key='OUTPUT_3', echo_stdout_stderr=True)
        ],
        [
            sg.Button('清空输出日志', button_color=('white', 'blue'),
                      key='CLEAR_3', size=(50, 1)),
            sg.Exit('退出', button_color=('white', 'firebrick4'),
                    key='Exit', size=(50, 1))]
    ]
    window = sg.Window('知乎回答表情包搜索', layout)
    while True:
        event, values = window.read()
        if event == '-ZHIHUSEARCHBUTTON-':
            if values['-ZHIHUFOLDER-'] != '':
                threading.Thread(target=ZhihuSpider, args=(
                    values['-ZHIHUFOLDER-'], values['-ZHIHUURL-'], window)).start()
            else:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), "请先选择要存放的表情包目录！")
        if event == sg.WIN_CLOSED or event == 'Exit':
            break
        if event == 'CLEAR_3':
            window['OUTPUT_3'].update(value=' ')
    window.close()


def Copy(window, event):
    try:
        image_base64 = window[event].Widget.image.cget('data')
        img = b64decode(image_base64)
        buf = BytesIO(img)
        im = Image.open(buf)
        output = BytesIO()
        im.save(output, 'BMP')
        data = output.getvalue()[14:]
        output.close()
        clip.OpenClipboard()  # 打开剪贴板
        clip.EmptyClipboard()  # 先清空剪贴板
        clip.SetClipboardData(win32con.CF_DIB, data)  # 将图片放入剪贴板
        clip.CloseClipboard()
    except:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                            time.localtime()), "这里没有表情包哦~")

def RandomSearch(window):
    for i in range(100):
        window['-IMG%s-' % (str(i+1))].update(data=None)

    while True:
        try:
            conn = pymysql.connect(
                '47.96.189.80', user="root", passwd="189154", db="EmojiPic")
            break
        except:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), '重连数据库中...')
            try:
                conn.close()
            except:
                pass
    cur = conn.cursor()
    cur.execute("SELECT * FROM `EMOJITEXT` ORDER BY RAND() LIMIT 3;")
    resTuple = cur.fetchall()
    key_set = [r[0] for r in resTuple]
    cur.close()
    conn.close()
    cnt = 1
    starttime = time.time()
    for k in key_set:
        print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
              '正在展示第 %d / %d 张: %s ...' % (cnt, len(key_set), k.split('/')[-1]))
        try:
            while True:
                try:
                    r = requests.get(k, timeout=15)
                    # if r.status_codes == 200:
                    break
                except:
                    print(time.strftime(
                        "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), 'IP被COS禁了，睡眠0.5分钟！')
                    sleep(20)
            image = Image.open(BytesIO(r.content))
            image = image.resize((250, 250))
            buffered = BytesIO()
            image.save(buffered, format="PNG")
            img_str = base64.b64encode(buffered.getvalue())
        except:
            print(time.strftime(
                "[%Y-%m-%d %H:%M:%S]: ", time.localtime()), '由于某些原因，%s 已从网络端删除或者获取不到...' % (k))
            cnt += 1
            continue
        if cnt != 301:
            window['-IMG%s-' % (str(cnt))].update(data=img_str)
        else:
            print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                time.localtime()), "窗口只能展示300张，超出限制，剩下的等等吧...")
            break
        cnt += 1
    elapse = time.time() - starttime
    # print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),'一共耗时：%.3fs'%(elapse))
    print(time.strftime("[%Y-%m-%d %H:%M:%S]: ", time.localtime()),
          "随机3张表情包，送给亲爱的TA，展示搜索结果耗时：%.3fs" % (elapse))

def third_window():
    col = []
    for i in range(0, 300, 3):
        col.append(
            [
                sg.Image(data=None, background_color='plum', enable_events=True,
                         key='-IMG%s-' % (str(i+1)), size=(270, 150)),
                sg.Image(data=None, background_color='plum', enable_events=True,
                         key='-IMG%s-' % (str(i+2)), size=(270, 150)),
                sg.Image(data=None, background_color='plum', enable_events=True, key='-IMG%s-' % (str(i+3)), size=(270, 150))]
        )
    layout = [
        [sg.Frame('本地使用', [
             [
                 sg.Text('注：主要是为了防止断网情况下无法使用的备用方案，更快的本地搜索。', font=(
                     "Noto Serif SC", 8), size=(50, 1)),
             ],
            [
                sg.Text('表情包目录        ：'),
                sg.In(size=(80, 1), enable_events=True, key="-SECONDFOLDER-"),
                sg.FolderBrowse('浏览', size=(12, 1), button_color=(
                    'Lavender', 'BlueViolet'), font=("Noto Serif SC", 12))
             ],
            [
                sg.Button('下载 | 更新', font=("Noto Serif SC", 12),
                          size=(40, 1), key='-DOWNLOADBUTTON-', button_color=(
                    'WhiteSmoke', 'FireBrick')),
                sg.Button('本地识别', font=("Noto Serif SC", 12),
                          size=(40, 1), key='-RECOGNITIONBUTTON-', button_color=(
                    'CornflowerBlue', 'LightGreen')),
             ],
            [
                sg.Text('下载进度           ：'),
                sg.ProgressBar(100, orientation='h', size=(
                    70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-DOWNLOADPROGRESS-'),
                sg.Text('0%', key='-DOWNLOADPROGRESS_NUM-')
             ],
            [
                sg.Text('识别进度           ：'),
                sg.ProgressBar(100, orientation='h', size=(
                    70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-RECPROGRESS_2-'),
                sg.Text('0%', key='-RECPROGRESS_NUM_2-')
             ],
            [
                sg.Text('本地搜索关键词：'),
                sg.In(size=(80, 1), enable_events=True, key="-KEY2-"),
                sg.Button('搜索', font=("Noto Serif SC", 12),
                          size=(10, 1), key='-LOCALSEARCHBUTTON-', button_color=(
                    'Azure', 'Crimson'))
             ]
        ],
            font=("Noto Serif SC", 25), title_color='Tomato')
        ],
        [sg.Column(col, background_color='papayawhip', size=(
            850, 450), scrollable=True, justification="center", element_justification="center")],
        [sg.Output(size=(120, 10), key='OUTPUT_2', echo_stdout_stderr=True)],
        [
            sg.Button('清空输出日志', button_color=('white', 'blue'),
                      key='CLEAR_2', size=(50, 1)),
            sg.Exit('退出', button_color=('white', 'firebrick4'),
                    key='Exit', size=(50, 1))]
    ]
    window = sg.Window('本地上传 & 识别 & 搜索', layout)
    IMAGEKEY = ['-IMG' + str(i+1) + '-' for i in range(100)]
    while True:
        event, values = window.read()
        # if event == "-KEY2-":
        #     input =
        #     threading.Thread(target=LocalSearch, args=(values['-SECONDFOLDER-'], window, str(values['-KEY2-']))).start()
        if event in IMAGEKEY:
            threading.Thread(target=Copy, args=(window, event)).start()
        if event == '-DOWNLOADBUTTON-':
            if values['-SECONDFOLDER-'] != '':
                threading.Thread(target=DownloadAndUpdate, args=(
                    values['-SECONDFOLDER-'], window)).start()
            else:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), "请先选择下载目录！")
        if event == '-RECOGNITIONBUTTON-':
            if values['-SECONDFOLDER-'] != '':
                threading.Thread(target=LocalRecognition, args=(
                    values['-SECONDFOLDER-'], window)).start()
            else:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), "请先选择要识别的表情包目录！")
        if event == '-LOCALSEARCHBUTTON-':
            if values['-SECONDFOLDER-'] != '':
                threading.Thread(target=LocalSearch, args=(
                    values['-SECONDFOLDER-'], window, str(values['-KEY2-']))).start()
            else:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), "请先选择要搜索的表情包目录！")
        if event == sg.WIN_CLOSED or event == 'Exit':
            break
        if event == 'CLEAR_2':
            window['OUTPUT_2'].update(value=' ')
    window.close()


def GUI():
    sg.theme('LightGrey1')
    col = []
    img_title = b64decode(pic)
    buf = BytesIO(img_title)
    im = Image.open(buf)
    im = im.resize((140, 100))
    buffered = BytesIO()
    im.save(buffered, format="PNG")
    img_title = base64.b64encode(buffered.getvalue())
    for i in range(0, 300, 3):
        col.append(
            [
                sg.Image(data=None, background_color='plum', enable_events=True,
                         key='-IMG%s-' % (str(i+1)), size=(270, 150)),
                sg.Image(data=None, background_color='plum', enable_events=True,
                         key='-IMG%s-' % (str(i+2)), size=(270, 150)),
                sg.Image(data=None, background_color='plum', enable_events=True, key='-IMG%s-' % (str(i+3)), size=(270, 150))]
        )
    menu_def = [['&知乎爬虫', ['&爬取窗口']],
                ['&本地识别搜索', ['&搜索窗口']],
                ['&当前在线用户', ['&列表窗口']],
                ]

    layout = [
        [
            sg.Menu(menu_def, tearoff=False, pad=(20, 1))
        ],
        [
            sg.Image(data=img_title, background_color=None,
                     enable_events=True),
            sg.Text('当前数据库表情包数量：', font=("Noto Serif SC", 12), size=(20, 1)),
            sg.Text('暂无数据', font=("Noto Serif SC", 12),
                    relief=sg.RELIEF_RIDGE, key='-EMOJINUM-', size=(18, 1)),
            sg.Text('当前在线用户数：', font=("Noto Serif SC", 12), size=(18, 1)),
            sg.Text('暂无数据', font=("Noto Serif SC", 12),
                    size=(18, 1), relief=sg.RELIEF_RIDGE, key='-USERNUM-')
        ],
        [
            sg.Text('Tips：云端搜索可能较慢，可以使用本地搜索。', font=(
                "Noto Serif SC", 8), size=(40, 1), justification='left')
        ],
        # [
        #     sg.Frame(
        #         '知乎表情包爬取：', [
        #             [
        #                 sg.Text('表情包目录：'),
        #                 sg.In(size=(26, 1), enable_events=True,
        #                       key="-ZHIHUFOLDER-"),
        #                 sg.FolderBrowse('浏览', size=(12, 1)),
        #                 sg.Text('回答链接：'),
        #                 sg.In(size=(26, 1), enable_events=True,
        #                       key="-ZHIHUURL-"),
        #                 sg.Button('开始爬取', font=("Noto Serif SC", 8),
        #                           size=(15, 1), key='-ZHIHUSEARCHBUTTON-')
        #             ]
        #         ],
        #         font=("Noto Serif SC", 25), title_color='Tomato')
        # ],
        [sg.Frame('云端使用', [
            [
                sg.Text('上传目录    ：'),
                sg.In(size=(80, 1), enable_events=True, key="-FIRSTFOLDER-"),
                sg.FolderBrowse('浏览', button_color=(
                    'Lavender', 'BlueViolet'), font=("Noto Serif SC", 10)),
                sg.Button('一键上传识别', font=("Noto Serif SC", 10),
                          size=(10, 1), key='-UPLOAD-', button_color=('DimGray', 'SpringGreen'))
            ],
            [
                sg.Text('上传进度    ：'),
                sg.ProgressBar(100, orientation='h', size=(
                    70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-UPLOADPROGRESS-'),
                sg.Text('0%', key='-UPLOADPROGRESS_NUM-')
            ],
            [
                sg.Text('识别进度    ：'),
                sg.ProgressBar(100, orientation='h', size=(
                    70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-RECPROGRESS-'),
                sg.Text('0%', key='-RECPROGRESS_NUM-')
            ],
            [
                sg.Text('搜索关键词：'),
                sg.In(size=(80, 1), enable_events=True, key="-KEY1-"),
                sg.Button('云端搜索', font=("Noto Serif SC", 12),
                          size=(15, 1), key='-KEYBUTTON_1-', button_color=('MintCream', 'MediumVioletRed'))
            ],
            [
                sg.Text('搜索规则：\n1.直接搜索; \n 2.多关键字添加："," 为‘或’的关系，如"你好,我是"，就是包含"你好"或者"我是"都展示; \n 3.多关键字添加：";" 为‘并’的关系，如"你好;我是"，即包含"你好"并且有"我是"才展示.',
                        justification='left', font=("Noto Serif SC", 10)),
                sg.Text('                                '),
                sg.Button('运气一下', font=("Noto Serif SC", 12),
                          size=(15, 1), key='-KEYBUTTON_RANDOM-', button_color=('MintCream', 'Purple'))

            ],
        ],
            font=("Noto Serif SC", 20), title_color='DarkRed')
        ],

        # [sg.Frame('本地使用', [
        #     [
        #         sg.Text('注：主要是为了防止断网情况下无法使用的备用方案', font=(
        #             "Noto Serif SC", 8), size=(38, 1)),
        #     ],
        #     [
        #         sg.Text('表情包目录        ：'),
        #         sg.In(size=(80, 1), enable_events=True, key="-SECONDFOLDER-"),
        #         sg.FolderBrowse('浏览', size=(12, 1))
        #     ],
        #     [
        #         sg.Button('下载 | 更新', font=("Noto Serif SC", 10),
        #                   size=(49, 1), key='-DOWNLOADBUTTON-'),
        #         sg.Button('本地识别', font=("Noto Serif SC", 10),
        #                   size=(49, 1), key='-RECOGNITIONBUTTON-'),
        #     ],
        #     [
        #         sg.Text('下载进度           ：'),
        #         sg.ProgressBar(100, orientation='h', size=(
        #             70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-DOWNLOADPROGRESS-'),
        #         sg.Text('0%', key='-DOWNLOADPROGRESS_NUM-')
        #     ],
        #     [
        #         sg.Text('识别进度           ：'),
        #         sg.ProgressBar(100, orientation='h', size=(
        #             70, 20), style='winnative', bar_color=('palegreen', 'pink'), relief=sg.RELIEF_RIDGE, key='-RECPROGRESS_2-'),
        #         sg.Text('0%', key='-RECPROGRESS_NUM_2-')
        #     ],
        #     [
        #         sg.Text('本地搜索关键词：'),
        #         sg.In(size=(80, 1), enable_events=True, key="-KEY2-"),
        #         sg.Button('搜索', font=("Noto Serif SC", 8),
        #                   size=(15, 1), key='-LOCALSEARCHBUTTON-')
        #     ]
        # ],
        #     font=("Noto Serif SC", 25), title_color='Tomato')
        # ],
        [sg.Column(col, background_color='papayawhip', size=(
            850, 300), scrollable=True, justification="center", element_justification="center")],
        [sg.Output(size=(120, 10), key='OUTPUT_1', echo_stdout_stderr=True)],
        [
            sg.Button('清空输出日志', button_color=('white', 'blue'),
                      key='CLEAR_1', size=(50, 1)),
            sg.Exit('退出', button_color=('white', 'firebrick4'),
                    key='Exit', size=(50, 1))
        ]
    ]
    window = sg.Window('AI Sticker Searcher V1.0', layout,
                       default_element_size=(80, 1), resizable=True, element_justification='center', text_justification='center')

    IMAGEKEY = ['-IMG' + str(i+1) + '-' for i in range(100)]
    Thread_1 = threading.Thread(target=OnlineUserNumber, args=(window,))
    Thread_1.start()
    Thread_2 = threading.Thread(target=UpdateEmojiNumber, args=(window,))
    Thread_2.start()

    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED or event == 'Exit':
            global flag
            flag = 0
            stop_thread(Thread_1)
            stop_thread(Thread_2)
            break
        if event == '-UPLOAD-':
            if str(values['-FIRSTFOLDER-']) != '':
                threading.Thread(target=COSUploadAndRecognize, args=(
                    window, str(values['-FIRSTFOLDER-']))).start()
            else:
                print(time.strftime("[%Y-%m-%d %H:%M:%S]: ",
                                    time.localtime()), "请先选择上传目录！")
        if event == '-KEYBUTTON_1-':
            threading.Thread(target=CloudSearch, args=(
                window, str(values['-KEY1-']))).start()
        if event == '-KEYBUTTON_RANDOM-':
            threading.Thread(target=RandomSearch, args=(
                window, )).start()
        if event in IMAGEKEY:
            threading.Thread(target=Copy, args=(window, event)).start()
        # if event == '-DOWNLOADBUTTON-':
        #     threading.Thread(target=DownloadAndUpdate, args=(
        #         values['-SECONDFOLDER-'], window)).start()
        # if event == '-RECOGNITIONBUTTON-':
        #     threading.Thread(target=LocalRecognition, args=(
        #         values['-SECONDFOLDER-'], window)).start()
        # if event == '-LOCALSEARCHBUTTON-':
        #     threading.Thread(target=LocalSearch, args=(
        #         values['-SECONDFOLDER-'], window, values['-KEY2-'])).start()
        # if event == '-ZHIHUSEARCHBUTTON-':
        #     threading.Thread(target=ZhihuSpider, args=(
        #         values['-ZHIHUFOLDER-'], values['-ZHIHUURL-']),window).start()
        if event == '爬取窗口':
            # threading.Thread(target=second_window,args=()).start()
            second_window()
        if event == '搜索窗口':
            # threading.Thread(target=third_window,args=()).start()
            third_window()
        if event == '列表窗口':
            # threading.Thread(target=third_window,args=()).start()
            fourth_window()
        if event == 'CLEAR_1':
            window['OUTPUT_1'].update(value=' ')

    window.close()


if __name__ == "__main__":
    # threading.Thread(target=GUI(),args=()).start()
    global flag
    flag = 1
    GUI()
